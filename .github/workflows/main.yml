# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ci-config:
    name: config
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check-ref.outputs.enabled }}${{ steps.skip-if-redundant.outputs.enabled }}
    steps:
    - name: check ci config file
      run: |
        git -c protocol.version=2 clone \
          --no-tags \
          --single-branch \
          -b main \
          --depth 1 \
          --filter=blob:none \
          https://github.com/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') \
          config-repo &&
          cd config-repo &&
          git checkout HEAD -- .ci/config || : ignore
    - name: check whether CI is enabled for ref
      id: check-ref
      run: |
        enabled=yes
        if test -x config-repo/.ci/config/allow-ref &&
          ! config-repo/.ci/config/allow-ref '${{ github.ref }}'
        then
          enabled=no
        fi
        echo "enabled=$enabled" >>$GITHUB_OUTPUT
    - name: skip if the commit or tree was already tested
      id: skip-if-redundant
      uses: actions/github-script@v6
      if: steps.check-ref.outputs.enabled == 'yes'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            // Figure out workflow ID, commit and tree
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
              });
              const workflow_id = run.workflow_id;
              const head_sha = run.head_sha;
              const tree_id = run.head_commit.tree_id;

              // successful run for that commit or tree?
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id,
                per_page: 500,
                branch: context.ref,
                status: 'success',
              });
              for (const run of runs.workflow_runs) {
                if (run.head_sha === head_sha || run.head_commit.tree_id === tree_id) {
                  core.info(`Skipping because run ${run.id}: ${head_sha} already tested this commit or tree`);
                  core.setOutput('skipped', 'true');
                  break;
                }
                if (run.head_commit && tree_id === run.head_commit.tree_id) {
                  core.info(`Skipping because run ${run.id}: ${head_sha} already tested this tree`);
                  core.setOutput('skipped', 'true');
                  break;
                }
              }
          } catch (error) {
            core.warning(error);
          }
  test:
    runs-on: ubuntu-latest
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    strategy:
      matrix:
        node-version:
          - "19"
          - "18"
          - "16"
        bundle:
          - "true"
        include:
          - node-version: "*"
            bundle: "false"

    name: Test Node ${{ matrix.node-version }} with --bundle=${{ matrix.bundle }}

    steps:
    - uses: actions/checkout@v3
    - name: Use node version ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
    - run:  npm ci && npm run build

  lint:
    runs-on: ubuntu-latest
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: "*"
        check-latest: true
    
    - name: Install dependencies
      run:  npm ci
    
    - name: Lint Action
      uses: wearerequired/lint-action@v2.3.0
      with:
        eslint: true
        prettier: true
        eslint_extensions: .js,.jsx,.ts,.tsx
        prettier_extensions: .js,.jsx,.ts,.tsx,.json,.yml,.md
        eslint_args: --max-warnings 0
        prettier_args: --config .prettierrc 'src/**/*.{js,jsx,ts,tsx,json,yml,md}' --write
    
    # - name: Linter
    #   run:  npm run lint

    # - name: Prettier
    #   run:  npm run prettier-format

  release:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: "*"
        check-latest: true
    - run:  npm ci

    # - name: Release
    #   run:  npm run release

    # - name: Publish
    #   run:  npm publish
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false

    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./build/git_commands.js
    #     asset_name: git_commands.js
    #     asset_content_type: application/javascript
    